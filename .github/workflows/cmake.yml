name: CMake

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        arch: [32, 64]
        
    env:
      BUILD_TYPE: Release
    
    steps:      
    - uses: actions/checkout@v4
    
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "exe=${{ github.workspace }}/build${{ runner.os == 'Linux' && '/c7zip-sample' || '\Release\c7zip-sample.exe' }}" >> "$GITHUB_OUTPUT"
        echo "shared=${{ github.workspace }}/build${{ runner.os == 'Linux' && '/libc7zip.so' || '\Release\c7zip.dll' }}" >> "$GITHUB_OUTPUT"
        
    - name: Install packages (Linux)
      if: runner.os == 'Linux'
      run: sudo apt-get update -y && sudo apt-get install -y build-essential gcc-multilib g++-multilib
        
    - name: Configure CMake (Linux)
      if: runner.os == 'Linux'
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      env:
        CPP_COMPILER: g++
        C_COMPILER: gcc
        GENERATOR: Unix Makefiles
      run: >
        cmake 
        -DCMAKE_CXX_COMPILER=$CPP_COMPILER
        -DCMAKE_C_COMPILER=$C_COMPILER
        -DCMAKE_BUILD_TYPE=$BUILD_TYPE 
        -G "$GENERATOR" 
        -DCMAKE_C_FLAGS=-m${{ matrix.arch }} 
        -DCMAKE_CXX_FLAGS=-m${{ matrix.arch }}
        -Wno-dev
        -S ${{ github.workspace }}
        -B ${{ steps.strings.outputs.build-output-dir }}
        
    - name: Build (Linux)
      if: runner.os == 'Linux'
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }}
      
    - name: Disable Strawberry Perl (Windows) 
      if: runner.os == 'Windows'
      run: |
        Rename-Item -Path "C:\Strawberry" -NewName "_No_Strawberry_"
        Get-Command "patch" -All | Format-Table CommandType, Name, Definition
      
    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      env:
        CPP_COMPILER: cl
        C_COMPILER: cl
        GENERATOR: Visual Studio 17 2022
      run: >
        cmake 
        -DCMAKE_CXX_COMPILER=$env:CPP_COMPILER
        -DCMAKE_C_COMPILER=$env:C_COMPILER
        -DCMAKE_BUILD_TYPE=$env:BUILD_TYPE 
        -G "$env:GENERATOR" 
        -A ${{ matrix.arch == '32' && 'Win32' || 'x64' }}
        -Wno-dev
        -S ${{ github.workspace }}
        -B ${{ steps.strings.outputs.build-output-dir }}
        
    - name: Build (Windows)
      if: runner.os == 'Windows'
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config $env:BUILD_TYPE
      
    - name: Prepare upload artifact
      run: |
        ls -l ${{ steps.strings.outputs.build-output-dir }}
        ls -l ${{ steps.strings.outputs.build-output-dir }}/vendor/lib7zip/Lib7Zip
        mkdir $RUNNER_TEMP/upload
        mkdir $RUNNER_TEMP/upload/bin
        cp ${{ steps.strings.outputs.exe }} $RUNNER_TEMP/upload/bin
        mkdir $RUNNER_TEMP/upload/lib
        cp ${{ steps.strings.outputs.shared }} $RUNNER_TEMP/upload/lib
        cp -r ${{ github.workspace }}/include $RUNNER_TEMP/upload
        cp ${{ github.workspace }}/LICENSE $RUNNER_TEMP/upload
        cp ${{ github.workspace }}/README.md $RUNNER_TEMP/upload
        
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.event.repository.name }}-${{ runner.os }}-${{ matrix.arch }}
        path: ${{ runner.temp }}/upload
        if-no-files-found: error
        retention-days: 1
# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        arch: [x86, x64]
        build_type: [Release]
        c_compiler: [gcc, cl] #clang, 
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          #- os: ubuntu-latest
          #  c_compiler: clang
          #  cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          #- os: windows-latest
          #  c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - name: Disable Strawberry Perl on Windows on PATH by renaming directory
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Rename-Item -Path "C:\Strawberry" -NewName "_No_Strawberry_"
        Get-Command "patch" -All | Format-Table CommandType, Name, Definition
        
    - name: Install gcc-multilib on Linux
      if: runner.os == 'Linux'
      run: sudo apt-get update -y && sudo apt-get install -y gcc-multilib
      
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        
    - name: Set Linux 32-bit opts
      if: ${{ (runner.os == 'Linux') && (matrix.arch == 'x86') }}
      run: |
        echo 'ARCH_OPTS=-G "Unix Makefiles" -DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32' >> $GITHUB_ENV
        echo 'CONFIG_OPTS=' >> $GITHUB_ENV
      
    - name: Set Linux 64-bit opts
      if: ${{ (runner.os == 'Linux') && (matrix.arch == 'x64') }}
      run: |
        echo 'ARCH_OPTS=-G "Unix Makefiles" -DCMAKE_C_FLAGS=-m64 -DCMAKE_CXX_FLAGS=-m64' >> $GITHUB_ENV
        echo 'CONFIG_OPTS=' >> $GITHUB_ENV
      
    - name: Set Windows 32-bit opts
      if: ${{ (runner.os == 'Windows') && (matrix.arch == 'x86') }}
      run: |
        echo 'ARCH_OPTS=-G "Visual Studio 17 2022" -A Win32' >> $GITHUB_ENV
        echo "CONFIG_OPTS=--config ${{ matrix.build_type }}" >> $GITHUB_ENV
      
    - name: Set Windows 64-bit opts
      if: ${{ (runner.os == 'Windows') && (matrix.arch == 'x64') }}
      run: |
        echo 'ARCH_OPTS=-G "Visual Studio 17 2022" -A x64' >> $GITHUB_ENV
        echo "CONFIG_OPTS=--config ${{ matrix.build_type }}" >> $GITHUB_ENV
      
    - name: Debug ARCH_OPTS
      run: echo ARCH_OPTS=${{ env.ARCH_OPTS }}
      shell: bash

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake 
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        ${{ env.ARCH_OPTS }} 
        ${{ env.CONFIG_OPTS }} 
        -Wno-dev
        -S ${{ github.workspace }}
        -B ${{ steps.strings.outputs.build-output-dir }}
      shell: bash

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} ${{ env.CONFIG_OPTS }}
      shell: bash
      
      #--config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
      
    - name: Prepare Linux upload artifact
      if: runner.os == 'Linux'
      shell: bash
      run: |
        ls -l ${{ steps.strings.outputs.build-output-dir }}
        ls -l ${{ steps.strings.outputs.build-output-dir }}/vendor/lib7zip/Lib7Zip
        mkdir $RUNNER_TEMP/upload
        mkdir $RUNNER_TEMP/upload/bin
        cp ${{ steps.strings.outputs.build-output-dir }}/c7zip-sample $RUNNER_TEMP/upload/bin
        mkdir $RUNNER_TEMP/upload/lib
        cp ${{ steps.strings.outputs.build-output-dir }}/vendor/lib7zip/Lib7Zip/lib7zip.a $RUNNER_TEMP/upload/lib
        cp ${{ steps.strings.outputs.build-output-dir }}/libc7zip.so $RUNNER_TEMP/upload/lib
      
    - name: Prepare Windows upload artifact
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        New-Item -Path "$env:RUNNER_TEMP" -Name "upload" -ItemType "directory"
        New-Item -Path "$env:RUNNER_TEMP\upload" -Name "bin" -ItemType "directory"
        Copy-Item "${{ steps.strings.outputs.build-output-dir }}\${{ matrix.build_type }}\c7zip-sample.exe" -Destination "$env:RUNNER_TEMP\upload\bin"
        New-Item -Path "$env:RUNNER_TEMP\upload" -Name "lib" -ItemType "directory"
        Copy-Item "${{ steps.strings.outputs.build-output-dir }}\${{ matrix.build_type }}\c7zip.lib" -Destination "$env:RUNNER_TEMP\upload\lib"
        Copy-Item "${{ steps.strings.outputs.build-output-dir }}\${{ matrix.build_type }}\c7zip.dll" -Destination "$env:RUNNER_TEMP\upload\lib"
    
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.event.repository.name }}-${{ runner.os }}-${{ matrix.c_compiler }}
        path: ${{ runner.temp }}/upload
        if-no-files-found: error
        retention-days: 1
